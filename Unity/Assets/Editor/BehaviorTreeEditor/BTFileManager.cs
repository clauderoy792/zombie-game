using UnityEngine;
using UnityEditor;
using System;
using System.IO;
using System.Xml;
using System.Collections.Generic;


public static class BTFileManager
{

	public static void Save(List<BTNode> aNodes, string aPath)
	{
		XmlWriterSettings settings = new XmlWriterSettings();
		settings.Indent = true;
		settings.ConformanceLevel = ConformanceLevel.Fragment;
		settings.OmitXmlDeclaration = true;
		
		XmlWriter writer = XmlWriter.Create(aPath, settings);
	    writer.WriteStartElement("Nodes");
		
		foreach(BTNode node in aNodes)
		{
			node.Save(writer, aNodes);
		}
		
		writer.Flush();
		writer.Close();
		
		//
		AssetDatabase.Refresh();
	}
	
	public static List<BTNode> Load(string aPath)
	{
		List<BTNode> result = new List<BTNode>();

		//
		XmlDocument xmlDoc = new XmlDocument();
		
		
		//
		using(FileStream fs = new FileStream(aPath, FileMode.Open, FileAccess.Read))
		{
			//
			xmlDoc.Load(fs);
			
			XmlNodeList elemList = xmlDoc.ChildNodes[0].ChildNodes;//("/Nodes");
		
			//
			for(int i = 0; i < elemList.Count; i++)
			{
				XmlNode currentElem = elemList[i];
				
				if(currentElem.Name == "Root")
				{
					// Create Texture from xml data
					result.Add(BTRootNode.Load(currentElem));
				}
				else if(currentElem.Name == "Action")
				{
					// Create Button from xml data
					result.Add(BTActionNode.Load(currentElem));
				}
				else if(currentElem.Name == "Sequence")
				{
					// Create Button from xml data
					result.Add(BTSequenceNode.Load(currentElem));
				}
				else if(currentElem.Name == "Parent")
				{
					// Create Button from xml data
					result.Add(BTParentNode.Load(currentElem));
				}
				else if(currentElem.Name == "Custom")
				{
					// Create Button from xml data
					result.Add(BTCustomNode.Load(currentElem));
				}
				else if(currentElem.Name == "Selector")
				{
					// Create Button from xml data
					result.Add(BTSelectorNode.Load(currentElem));
				}
			}
		}
	
		//
		foreach(BTNode node in result)
		{
			node.ConnectHierarchy(result);
		}
		
		//
		return result;
	}
	
	public static void Export(BTRootNode aRootNode, string aPath)
	{
		// Generate C# Behavior Class
		FileInfo fileInfo = new FileInfo(aPath);

		using(StreamWriter file = new StreamWriter(aPath))
		{
			#region HEADER
			file.WriteLine 
			(
				"/*\n*   This script has been auto-generated by the Behavior Tree Editor. Altering the script may cause issues.\n*/\n\n"+
				"public class " + fileInfo.Name.Remove(fileInfo.Name.Length-3) + " : BehaviorTree\n" +
				"{\n"
			);
			#endregion
		
			#region CONSTRUCTOR
			file.WriteLine("	public " + fileInfo.Name.Remove(fileInfo.Name.Length-3) + "(Character aCharacter) : base(aCharacter)\n	{\n	}\n");
			#endregion
			
			#region BODY
			file.WriteLine("	protected override void InitializeTree ()\n	{");
			
			// First Iteration
			foreach(BTNode node in aRootNode.ChildNodes)
			{
				if(node == null)
				{
					continue;
				}
				
				// if child node of root is action dont go deeper and add it
				if(node is BTParentNode)
				{
					(node as BTParentNode).Export(file);
				}
			}
			
			// Final iteration
			foreach(BTNode node in aRootNode.ChildNodes)
			{
				if(node == null)
				{
					continue;
				}
				
				// if child node of root is action dont go deeper and add it
				if(node is BTActionNode)
				{
					file.WriteLine("		mRoot.AddChild(new "+node.Name+"(mCharacter));");
				}
				else if(node is BTParentNode)
				{
					file.WriteLine("		mRoot.AddChild("+node.UniqueIdentifier+");");
				}
			}
			
			file.WriteLine("	}");
			#endregion
			
			#region FOOTER
			file.WriteLine("}");
			#endregion
		}
		
		AssetDatabase.Refresh();
	}
}
